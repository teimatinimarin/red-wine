AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Creates Sensor Resources
Parameters:
  GithubToken:
    Description: "Github OAuth Token"
    Type: String
  u:
    Description: "DB User"
    Type: String
  p:
    Description: "DB Password"
    Type: String

Resources:
  # This CloudFormation template creates:
  # 1: ECR Repository
  #    This docker repo stores redwine image
  # 2: Elastic File System
  #    Elastic File System that can be shared between multiple EC2 instances and docker containers
  # 3: VPC
  #    Networking Resources
  # 4: S3 Bucket
  #    S3 Bucket used for CICD Pipeline
  # 5: Code Build Project and IAM Role
  #    Builds this project in AWS Code Build
  # 6: AWS Pipeline and IAM Role
  #    CICD AWS Pipeline for this project
  # 7: Cloudformation Role
  #    Role used for CloudFormation to create Resources as part of this CICD Pipeline

  # Execute this by:
  # aws cloudformation create-stack --capabilities CAPABILITY_IAM --stack-name fundation --template-body file://~/git/concepts/redwine/redwine.distribution/src/main/cloudformation/fundation.yml --parameters ParameterKey=GithubToken,ParameterValue=TOKEN
  # aws cloudformation update-stack --capabilities CAPABILITY_IAM --stack-name fundation --template-body file://~/git/concepts/redwine/redwine.distribution/src/main/cloudformation/fundation.yml --parameters ParameterKey=GithubToken,ParameterValue=TOKEN

  RedwineHub:
    Type: "AWS::ECR::Repository"
    Properties:
      RepositoryName: "redwine"

  SensorNFS:
    Type: 'AWS::EFS::FileSystem'
    Properties:
      FileSystemTags:
      - Key: Name
        Value: SensorNFS

  ClusterVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true   # Needed for ACS Agent and cfn-signal
      EnableDnsHostnames: true # Needed to mount EFS
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: ClusterVPC

  ClusterSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ClusterVPC
      CidrBlock: 10.0.0.0/24
      AvailabilityZone: eu-west-1a
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: ClusterSubnetA
  ClusterSubnetB:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ClusterVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: eu-west-1b
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: ClusterSubnetB
  ClusterSubnetC:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ClusterVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: eu-west-1c
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: ClusterSubnetC

  # Internet Access
  ClusterInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: ClusterInternetGateway
  VPCInternetGatewayAssociation:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref ClusterVPC
      InternetGatewayId: !Ref ClusterInternetGateway

  # Routing
  ClusterRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ClusterVPC
      Tags:
        - Key: Name
          Value: ClusterRouteTable
  InternetIPv4Route:
    Type: AWS::EC2::Route
    DependsOn:
      - ClusterInternetGateway
      - VPCInternetGatewayAssociation
    Properties:
      RouteTableId: !Ref ClusterRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref ClusterInternetGateway
  SubnetRouteTableAssociationA:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ClusterSubnetA
      RouteTableId: !Ref ClusterRouteTable
  SubnetRouteTableAssociationB:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ClusterSubnetB
      RouteTableId: !Ref ClusterRouteTable
  SubnetRouteTableAssociationC:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref ClusterSubnetC
      RouteTableId: !Ref ClusterRouteTable

  DbSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: DbSecurityGroup
      GroupDescription: Allow db
      VpcId: !Ref ClusterVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 0.0.0.0/0

  NFSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: NFSSecurityGroup
      GroupDescription: Allow nfs
      VpcId: !Ref ClusterVPC
  NFSSecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    DependsOn: NFSSecurityGroup
    Properties:
      GroupId: !Ref NFSSecurityGroup
      IpProtocol: tcp
      FromPort: 2049
      ToPort: 2049
      SourceSecurityGroupId: !GetAtt NFSSecurityGroup.GroupId

  SshSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: SshSecurityGroup
      GroupDescription: Allow ssh
      VpcId: !Ref ClusterVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  # Mount EFS
  MountTarget:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref SensorNFS
      SubnetId: !Ref ClusterSubnetA
      SecurityGroups:
        - !Ref NFSSecurityGroup

  RedwineS3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: redwine.beuwa.com

  RedwineCodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: RedwineCodeBuildProject
      ServiceRole: !Ref CodeBuildRole
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: teimatinimarin/builder
        PrivilegedMode: true
      Source:
        Type: CODEPIPELINE
      TimeoutInMinutes: 10

  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [codebuild.amazonaws.com]
        Version: '2012-10-17'
      Path: /
      Policies:
      - PolicyName: CodeBuildAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Resource:
                - "arn:aws:logs:eu-west-1:432127854945:log-group:/aws/codebuild/RedwineCodeBuildProject"
                - "arn:aws:logs:eu-west-1:432127854945:log-group:/aws/codebuild/RedwineCodeBuildProject:*"
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
            - Effect: Allow
              Resource: "arn:aws:s3:::redwine.beuwa.com/*"
              Action:
                - s3:PutObject
                - s3:GetObject
                - s3:GetObjectVersion
            - Effect: Allow
              Resource: '*'
              Action:
                - ecr:BatchCheckLayerAvailability
                - ecr:CompleteLayerUpload
                - ecr:GetAuthorizationToken
                - ecr:InitiateLayerUpload
                - ecr:PutImage
                - ecr:UploadLayerPart

  RedwinePipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: RedwinePipeline
      RoleArn: !GetAtt CodePipelineRole.Arn
      Stages:
      - Name: Source
        Actions:
        - Name: SourceAction
          ActionTypeId:
            Category: Source
            Owner: ThirdParty
            Provider: GitHub
            Version: 1
          OutputArtifacts:
          - Name: SourceArtifact
          Configuration:
            Owner: teimatinimarin
            Repo: red-wine
            PollForSourceChanges: false
            Branch: master
            OAuthToken: !Ref GithubToken
          RunOrder: 1
      - Name: Build
        Actions:
        - Name: Build
          InputArtifacts:
          - Name: SourceArtifact
          OutputArtifacts:
          - Name: BuildArtifact
          ActionTypeId:
            Category: Build
            Owner: AWS
            Provider: CodeBuild
            Version: 1
          Configuration:
            ProjectName: RedwineCodeBuildProject
          RunOrder: 1
      - Name: Deploy
        Actions:
          - Name: DeployCF
            InputArtifacts:
            - Name: SourceArtifact
            ActionTypeId:
              Category: Deploy
              Owner: AWS
              Provider: CloudFormation
              Version: 1
            Configuration:
              ActionMode: CREATE_UPDATE
              Capabilities: CAPABILITY_NAMED_IAM
              RoleArn: !GetAtt CloudformationRole.Arn
              StackName: redwine-stack
              TemplatePath: SourceArtifact::redwine.distribution/src/main/cloudformation/application.yml
              TemplateConfiguration: SourceArtifact::redwine.distribution/src/main/cloudformation/application-configuration.json
            RunOrder: 1
          #- Name: DeployECS
          #  InputArtifacts:
          #    - Name: SourceArtifact
          #  ActionTypeId:
          #    Category: Deploy
          #    Owner: AWS
          #    Provider: ECS
          #    Version: 1
          #  Configuration:
          #    ClusterName: RedwineCluster
          #    ServiceName: RedwineWritter
          #    FileName: imagedefinitions.json
          #  RunOrder: 2
      ArtifactStore:
        Type: S3
        Location: !Ref RedwineS3Bucket

  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Action: ['sts:AssumeRole']
            Effect: Allow
            Principal:
              Service: [codepipeline.amazonaws.com]
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyName: CodePipelineAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Resource:
                  - "*"
                Action:
                  - iam:PassRole
                Condition:
                  StringEqualsIfExists:
                    iam:PassedToService:
                      - cloudformation.amazonaws.com
                      - ecs-tasks.amazonaws.com
              - Effect: Allow
                Resource:
                  - "*"
                Action:
                  - cloudwatch:*
                  - s3:*
                  - ecs:*
                  - ecr:*
                  - cloudformation:*
                  - codebuild:*

  CloudformationRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: ['sts:AssumeRole']
          Effect: Allow
          Principal:
            Service: [cloudformation.amazonaws.com]
        Version: '2012-10-17'
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonVPCFullAccess
        - arn:aws:iam::aws:policy/AmazonElasticFileSystemFullAccess
        - arn:aws:iam::aws:policy/IAMFullAccess
        - arn:aws:iam::aws:policy/AmazonECS_FullAccess
        - arn:aws:iam::aws:policy/AmazonSNSFullAccess
        - arn:aws:iam::aws:policy/AmazonRDSFullAccess

  CodePipelineWebhook:
    Type: AWS::CodePipeline::Webhook
    Properties:
      AuthenticationConfiguration:
        SecretToken: !Ref GithubToken
      Filters:
        - JsonPath: "$.ref"
          MatchEquals: refs/heads/{Branch}
      Authentication: GITHUB_HMAC
      TargetPipeline: !Ref RedwinePipeline
      TargetAction: SourceAction
      Name: RedwineWebhook
      TargetPipelineVersion: !GetAtt RedwinePipeline.Version
      RegisterWithThirdParty: true

  # DB
  #RDSCluster:
  #  Type: AWS::RDS::DBCluster
  #  Properties:
  #    MasterUsername: !Ref u
  #    MasterUserPassword: !Ref p
  #    DBClusterIdentifier: redwine
  #    Engine: aurora-mysql
  #    DBSubnetGroupName: !Ref RedwineDBSubnetGroup
  #    DBClusterParameterGroupName: default.aurora-mysql5.7
  #    VpcSecurityGroupIds:
  #      - !Ref DbSecurityGroup

  #RedwineDBInstance:
  #  Type: AWS::RDS::DBInstance
  #  Properties:
  #    DBSubnetGroupName: !Ref RedwineDBSubnetGroup
  #    DBParameterGroupName: default.aurora-mysql5.7
  #    Engine: aurora-mysql
  #    DBClusterIdentifier: !Ref RDSCluster
  #    PubliclyAccessible: true
  #    AvailabilityZone: eu-west-1a
  #    DBInstanceClass: db.t2.small

  #RDSDBInstance2:
  #  Type: AWS::RDS::DBInstance
  #  Properties:
  #    DBSubnetGroupName:
  #      Ref: DBSubnetGroup
  #    DBParameterGroupName:
  #      Ref: RDSDBParameterGroup
  #    Engine: aurora
  #    DBClusterIdentifier:
  #      Ref: RDSCluster
  #    PubliclyAccessible: 'true'
  #    AvailabilityZone:
  #      Fn::GetAtt:
  #        - Subnet2
  #        - AvailabilityZone
  #    DBInstanceClass: db.r3.xlarge


  # DB
  RedwinePostgresInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: redwinedb
      MasterUsername: !Ref u
      MasterUserPassword: !Ref p
      Engine: postgres
      EngineVersion: 10.6
      DBParameterGroupName: default.postgres10
      AllocatedStorage: 20
      DBSubnetGroupName: !Ref RedwineDBSubnetGroup
      PubliclyAccessible: true
      AvailabilityZone: eu-west-1a
      DBInstanceClass: db.t2.micro
      VPCSecurityGroups:
        - !Ref DbSecurityGroup


  RedwineDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: "Redwine DB Subnet Group"
      SubnetIds:
        - !Ref ClusterSubnetA
        - !Ref ClusterSubnetB
        - !Ref ClusterSubnetC


